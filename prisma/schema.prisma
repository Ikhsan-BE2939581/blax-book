generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String?
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")

  roleId String
  role   Role @relation(fields: [roleId], references: [id])

  // Relations
  venuesCreated   Venue[] @relation("VenueCreatedBy")
  venuesUpdated   Venue[] @relation("VenueUpdatedBy")
  schedulesCreated Schedule[] @relation("ScheduleCreatedBy")
  schedulesUpdated Schedule[] @relation("ScheduleUpdatedBy")
  bookings        Booking[]
  newsCreated     News[] @relation("NewsCreatedBy")
  newsUpdated     News[] @relation("NewsUpdatedBy")
  vouchersCreated Voucher[] @relation("VoucherCreatedBy")
  vouchersUpdated Voucher[] @relation("VoucherUpdatedBy")
  facilitiesCreated Facility[] @relation("FacilityCreatedBy")
  facilitiesUpdated Facility[] @relation("FacilityUpdatedBy")
  rulesCreated    Rule[] @relation("RuleCreatedBy")
  rulesUpdated    Rule[] @relation("RuleUpdatedBy")
  userVouchers    UserVoucher[]

  Lineup Lineup[]
}

model Role {
  id   String @id @default(uuid())
  name String

  users User[]
}

model Venue {
  id        String   @id @default(uuid())
  name      String
  address   String
  gmapLink  String   @map("gmap_link")
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")

  createdId String
  updatedId String?

  createdBy User @relation("VenueCreatedBy", fields: [createdId], references: [id])
  updatedBy User? @relation("VenueUpdatedBy", fields: [updatedId], references: [id])

  schedules Schedule[]
}

model Schedule {
  id        String   @id @default(uuid())
  time      DateTime
  typeEvent String   @map("type_event")
  typeMatch String   @map("type_match")
  team      Int
  feePlayer Int      @map("fee_player")
  feeGk     Int      @map("fee_gk")
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")
  imageUrl  String   @map("image_url")

  createdId String
  updatedId String?
  venueId   String

  createdBy User    @relation("ScheduleCreatedBy", fields: [createdId], references: [id])
  updatedBy User?   @relation("ScheduleUpdatedBy", fields: [updatedId], references: [id])
  venue     Venue   @relation(fields: [venueId], references: [id])

  slots    Slot[]
  bookings Booking[]
  lineups  Lineup[]
  facilities ScheduleFacility[]
  rules    ScheduleRule[]
}

model Slot {
  id         String   @id @default(uuid())
  bookedSlots Int      @map("booked_slots")
  openSlots   Int      @map("open_slots")
  totalSlots  Int      @map("total_slots")
  gkSlots     Int      @map("gk_slots")
  playerSlots Int      @map("player_slots")
  createdAt   DateTime @map("created_at")

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
}

model Booking {
  id          String   @id @default(uuid())
  bookingType String   @map("booking_type")
  isGuest     Boolean  @map("is_guest")
  createdAt   DateTime @map("created_at")

  scheduleId String
  userId     String

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  payment  Payment?
}

model Payment {
  id          String   @id @default(uuid())
  status      String
  totalAmount Int      @map("total_amount")
  createdAt   DateTime @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  bookingId String @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  lineups Lineup[]
}

model Lineup {
  id        String   @id @default(uuid())
  position  String
  reason    String?
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")

  paymentId  String
  scheduleId String
  updatedId  String?

  payment  Payment @relation(fields: [paymentId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  updatedBy User?   @relation(fields: [updatedId], references: [id])
}

model News {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String   @map("image_url")
  content   String
  category  String
  status    String
  publishAt DateTime @map("publish_at")
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")

  createdId String
  updatedId String?

  createdBy User @relation("NewsCreatedBy", fields: [createdId], references: [id])
  updatedBy User? @relation("NewsUpdatedBy", fields: [updatedId], references: [id])
}

model UserVoucher {
  id       String @id @default(uuid())
  isUsed   Boolean @map("is_used")
  userId   String
  voucherId String

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])
}

model Voucher {
  id          String   @id @default(uuid())
  name        String
  description String
  isActive    Boolean   @map("is_active")
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  createdId String
  updatedId String?

  createdBy User @relation("VoucherCreatedBy", fields: [createdId], references: [id])
  updatedBy User? @relation("VoucherUpdatedBy", fields: [updatedId], references: [id])

  userVouchers UserVoucher[]
}

model Facility {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")

  createdId String
  updatedId String?

  createdBy User @relation("FacilityCreatedBy", fields: [createdId], references: [id])
  updatedBy User? @relation("FacilityUpdatedBy", fields: [updatedId], references: [id])

  scheduleFacilities ScheduleFacility[]
}

model ScheduleFacility {
  id         String  @id @default(uuid())
  scheduleId String
  facilityId String

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  facility Facility @relation(fields: [facilityId], references: [id])
}

model Rule {
  id        String   @id @default(uuid())
  description String
  createdAt DateTime @map("created_at")
  updatedAt DateTime? @map("updated_at")

  createdId String
  updatedId String?

  createdBy User @relation("RuleCreatedBy", fields: [createdId], references: [id])
  updatedBy User? @relation("RuleUpdatedBy", fields: [updatedId], references: [id])

  scheduleRules ScheduleRule[]
}

model ScheduleRule {
  id        String @id @default(uuid())
  rulesId   String
  scheduleId String

  rule     Rule     @relation(fields: [rulesId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])
}
